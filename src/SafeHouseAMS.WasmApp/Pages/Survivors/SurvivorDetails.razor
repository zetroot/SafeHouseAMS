@page "/SurvivorDetails/{SurvivorID}"
@using System.Threading
@using EnumDescriber
@using SafeHouseAMS.BizLayer.AssistanceRequests
@using SafeHouseAMS.BizLayer.ExploitationEpisodes
@using SafeHouseAMS.BizLayer.LifeSituations
@using SafeHouseAMS.BizLayer.LifeSituations.Commands
@using SafeHouseAMS.BizLayer.LifeSituations.Documents
@using SafeHouseAMS.BizLayer.LifeSituations.Records
@using SafeHouseAMS.BizLayer.Survivors
@using SafeHouseAMS.BizLayer.Survivors.Commands
@using SafeHouseAMS.WasmApp.RecordViews
@using SafeHouseAMS.WasmApp.Episodes

@inject ISurvivorCatalogue _survivorCatalogue;
@inject ILifeSituationDocumentsAggregate _documentsAggregate;
@inject IEpisodesCatalogue _episodesAggregate;
@inject IAssistanceRequestAggregate _requestAggregate;
@inject NavigationManager _navigationManager;
@inject ILogger<SurvivorDetails> _logger;
@inject NotificationService _notificationService;

<h3>Карточка пострадавшего</h3>
<div class="container-fluid">
    <div class="row">
        <div class="col-12-md">
            <RadzenButton Icon="list" ButtonStyle="ButtonStyle.Info" Text="В каталог" Click="@(() => _navigationManager.NavigateTo(nameof(SurvivorCatalogue)))"/>
        </div>
        <div class="col-12-md">
            <RadzenButton Icon="delete_outline" ButtonStyle="ButtonStyle.Danger" Text="Удалить всё" Click="@(async () => await DeleteSurvivorAction(_survivor!.ID))"/>
        </div>
    </div>

    @if (_survivor is null)
    {
        <div class="row">
            <div class="col-12">
                <div class="alert alert-info">
                    <RadzenLabel Text="Загрузка информации.."></RadzenLabel>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-sm-8">
                <RadzenFieldset Style="align-self: stretch" Text="Основная информация">
                    <div class="row">
                        <div class="col-sm">
                            № @_survivor.Num <br/>
                            Имя: @_survivor.Name <br/>
                            Пол: @_survivor.SexDisplay <br/>
                        </div>
                        <div class="col-sm">
                            @if (_survivor?.BirthDateAccurate is {} accDob)
                            {
                                <p>Дата рождения @accDob.Date.ToString("d") (полных лет @_survivor.Age)</p>
                            }
                            else if (_survivor!.Age is not null)
                            {
                                <p>Полных лет: @_survivor.Age</p>
                            }
                            else
                            {
                                <p>Возраст не известен</p>
                            }
                        </div>
                    </div>
                </RadzenFieldset>
            </div>
            <div class="col-sm-4 text-muted">
                <RadzenFieldset AllowCollapse="true" Collapsed="true" Text="Системная информация">
                    <div class="row">
                        <div class="col-sm">
                            ID: @_survivor.ID.ToString()
                        </div>
                        <div class="col-sm">
                            Создана: @_survivor.Created.ToString("G") <br/> Изменена: @_survivor.LastEdit.ToString("G")
                        </div>
                        <div class="col-sm">
                            Удалённая запись <input type="checkbox" disabled="disabled" value="@_survivor.IsDeleted" />
                        </div>
                    </div>
                </RadzenFieldset>
            </div>
        </div>
    }

    <div class="row">
        <div class="col-12">
            <SurvivorStateReportView StateReport="@_report"/>
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            <RadzenTabs>
                <Tabs>
                    <RadzenTabsItem Text="Изменения состояния">
                        <div class="row" style="margin-top: 5px">
                            <div class="col-md-12">
                                <button type="button" class="btn btn-primary" @onclick="@(() => _navigationManager.NavigateTo($"CreateCitizenshipChange/{SurvivorID}"))">Смена гражданства</button>
                                <button type="button" class="btn btn-primary" style="margin-left: 5px" @onclick="@(() => _navigationManager.NavigateTo($"DomicileUpdateEditor/{SurvivorID}"))">Обновление информации о проживании</button>
                                <button type="button" class="btn btn-primary" style="margin-left: 5px" @onclick="@(() => _navigationManager.NavigateTo($"MigrationStatusUpdateEditor/{SurvivorID}"))">Изменение миграционного статуса</button>
                                <button type="button" class="btn btn-primary" style="margin-left: 5px" @onclick="@(() => _navigationManager.NavigateTo($"RegistrationStatusUpdateEditor/{SurvivorID}"))">Изменение статуса регистрации</button>
                            </div>
                        </div>
                        <div class="row" style="margin-top: 5px">
                            <div class="col-md-12" st>
                                <button type="button" class="btn btn-primary" @onclick="@(() => _navigationManager.NavigateTo($"ChildrenUpdateEditor/{SurvivorID}"))">Обновление информации о детях</button>
                                <button type="button" class="btn btn-primary" style="margin-left: 5px" @onclick="@(() => _navigationManager.NavigateTo($"EducationUpdateEditor/{SurvivorID}"))">Обновление информации об образовании</button>
                                <button type="button" class="btn btn-primary" style="margin-left: 5px" @onclick="@(() => _navigationManager.NavigateTo($"SpecialitiesUpdateEditor/{SurvivorID}"))">Обновление специальностей</button>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-12">
                                @if (!_documents.Any())
                                {
                                    <div class="alert alert-info">
                                        <RadzenLabel Text="Нет документов для отображения"/>
                                    </div>
                                }
                                else
                                {
                                    @foreach (var doc in _documents)
                                    {
                                        <div class="row" style="margin-top: 5px">
                                            <div class="col-md-2">
                                                <a href="Document/@doc.ID">
                                                    <RadzenLabel Text="@doc.DocumentDate.ToString("G")"/>
                                                </a>
                                            </div>
                                            <div class="col-md-4">
                                                <a href="Document/@doc.ID">
                                                    @switch (doc)
                                                    {
                                                        case Inquiry:
                                                            <RadzenLabel Text="Обращение за помощью"/>
                                                            break;
                                                        case SingleRecordUpdate<CitizenshipRecord>:
                                                            <RadzenLabel Text="Смена гражданства"/>
                                                            break;
                                                        case SingleRecordUpdate<ChildrenRecord>:
                                                            <RadzenLabel Text="Обновление информации о детях"/>
                                                            break;
                                                        case SingleRecordUpdate<DomicileRecord>:
                                                            <RadzenLabel Text="Обновление информации о проживании"/>
                                                            break;
                                                        case MultiRecordsUpdate<EducationLevelRecord>:
                                                            <RadzenLabel Text="Обновление образования"/>
                                                            break;
                                                        case SingleRecordUpdate<MigrationStatusRecord>:
                                                            <RadzenLabel Text="Изменение миграционного статуса"/>
                                                            break;
                                                        case SingleRecordUpdate<RegistrationStatusRecord>:
                                                            <RadzenLabel Text="Изменение статуса регистрации"/>
                                                            break;
                                                        case MultiRecordsUpdate<SpecialityRecord>:
                                                            <RadzenLabel Text="Обновление информации о специальностях"/>
                                                            break;
                                                        default:
                                                            <RadzenLabel Text="Иной тип документа"/>
                                                            break;
                                                    }
                                                </a>
                                                <RadzenButton Icon="delete_outline" Click="@(async () => await DeleteDocumentAction(doc.ID))"></RadzenButton>
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    </RadzenTabsItem>
                    <RadzenTabsItem Text="Эпизоды эксплуатации">
                        <div class="row">
                            <div class="col-12">
                                @if (!_episodes.Any())
                                {
                                    <div class="alert alert-info">
                                        <RadzenLabel Text="Нет эпизодов для отображения"/>
                                    </div>
                                }
                                else
                                {
                                    @foreach (var episode in _episodes)
                                    {
                                        <div class="row">
                                            <EpisodeView Episode="@episode"/>
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    </RadzenTabsItem>
                    <RadzenTabsItem Text="Запросы помощи">
                        <div class="row">
                            <div class="col-12">
                                <div class="row">
                                    <div class="col">
                                        <RadzenButton Icon="add_circle_outline" Click="@(() => _navigationManager.NavigateTo($"/CreateRequest/{SurvivorID}"))"/>
                                    </div>
                                </div>
                                @if (!_requests.Any())
                                {
                                    <div class="alert alert-info">
                                        <RadzenLabel Text="У пострадавшего нет запросов помощи"/>
                                    </div>
                                }
                                else
                                {
                                    @foreach (var request in _requests)
                                    {
                                        <a href="AssistanceRequest/@request.ID">
                                            <div class="row" style="margin-top: 5px">
                                                <div class="col-md-2">
                                                    <RadzenLabel Text="@request.Created.ToString("G")"/>
                                                </div>
                                                <div class="col-md-4">
                                                    <RadzenLabel Text="@request.AssistanceKind.GetDescription()"/>
                                                </div>
                                                <div class="col-md-4">
                                                    <RadzenLabel Text="Работ выполнено: "/>
                                                    <RadzenLabel Text="@request.AssistanceActs.Count.ToString()"/>
                                                </div>
                                            </div>
                                        </a>
                                    }
                                }
                            </div>
                        </div>
                    </RadzenTabsItem>
                </Tabs>
            </RadzenTabs>
        </div>
    </div>
</div>

@code {
    private Survivor? _survivor;

    [Parameter] public string? SurvivorID { get; set; }

    private List<LifeSituationDocument> _documents = new();
    private List<Episode> _episodes = new();
    private SurvivorStateReport? _report;
    private List<AssistanceRequest> _requests = new();

    private async Task DeleteDocumentAction(Guid documentId)
    {
        try
        {
            var cmd = new DeleteDocument(documentId);
            await _documentsAggregate.ApplyCommand(cmd, CancellationToken.None);
            _notificationService.Notify(NotificationSeverity.Success, "Запись удалена", "Обновите страницу для обновления информации");
        }
        catch (Exception e)
        {
            _logger.LogError(e, "Failed to delete document with id = {DocumentIdentifier}", documentId);
            _notificationService.Notify(NotificationSeverity.Error, "Ошибка удаления");
        }
    }

    private async Task DeleteSurvivorAction(Guid survivorId)
    {
        try
        {
            var cmd = new DeleteSurvivor(survivorId);
            await _survivorCatalogue.ApplyCommand(cmd, CancellationToken.None);
            _notificationService.Notify(NotificationSeverity.Success, "Запись удалена", "Обновите страницу для обновления информации");
            _navigationManager.NavigateTo(nameof(SurvivorCatalogue));
        }
        catch (Exception e)
        {
            _logger.LogError(e, "Failed to survivor with id = {SurvivorIs}", survivorId);
            _notificationService.Notify(NotificationSeverity.Error, "Ошибка удаления");
        }
    }
    
    protected override async Task OnParametersSetAsync()
    {
        if (Guid.TryParse(SurvivorID, out var surId))
        {
            _survivor = await _survivorCatalogue.GetSingleAsync(surId, CancellationToken.None);
            _report = await _documentsAggregate.GetSurvivorReport(surId, CancellationToken.None);

            var epiCnt = 0;
            await foreach (var episode in _episodesAggregate.GetAllBySurvivor(surId, CancellationToken.None))
            {
                _logger.LogInformation("Got episode {EpisodeCounter}", ++epiCnt);
                _episodes.Add(episode);
            }

            var docCnt = 0;
            await foreach (var doc in _documentsAggregate.GetAllBySurvivor(surId, CancellationToken.None))
            {
                _logger.LogInformation("Got document {DocumentCounter}", ++docCnt);
                _documents.Add(doc);
            }

            var reqCnt = 0;
            await foreach (var request in _requestAggregate.GetAllBySurvivor(surId, CancellationToken.None))
            {
                _logger.LogInformation("Got request {RequestsCounter}", ++reqCnt);
                _requests.Add(request);
            }
        }
        await base.OnParametersSetAsync();
    }
}
