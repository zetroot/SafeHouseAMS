@page "/NewSurvivor"
@using System.Threading
@using SafeHouseAMS.BizLayer.ExploitationEpisodes
@using SafeHouseAMS.BizLayer.LifeSituations
@using SafeHouseAMS.BizLayer.LifeSituations.Commands
@using SafeHouseAMS.BizLayer.Survivors
@using SafeHouseAMS.BizLayer.Survivors.Commands
@using SafeHouseAMS.WasmApp.Episodes
@using SafeHouseAMS.WasmApp.Pages.LifeSituationDocuments
@using SafeHouseAMS.WasmApp.RecordEditors
@inject ISurvivorCatalogue _survivorCatalogue;
@inject ILifeSituationDocumentsAggregate _documentsAggregate;
@inject IEpisodesCatalogue _episodesCatalogue;
@inject NotificationService _notificationService;
@inject NavigationManager _navigationManager;

<h3>Новая карточка постардавшего</h3>

<div class="container-fluid">
    <div class="row">
        <div class="col-md-12">
            <RadzenTemplateForm TItem="SurvivorCreationRequest" Submit="SubmitSurvivor" Data="@_survivor">
                <div class="row">
                    <div class="col-md-8">
                        <RadzenFieldset Text="Общая информация">
                            <div class="row" style="margin: 5px">
                                <div class="col-md-2 align-items-center d-flex">
                                    Имя
                                </div>
                                <div class="col-md">
                                    <RadzenRequiredValidator Component="NameTextBox" Text="Имя обязательно для заполнения"/>
                                    <RadzenTextBox Style="width: 100%" Name="NameTextBox" Placeholder="Введите имя..." @bind-Value=@_survivor.Name />
                                </div>
                            </div>
                            <div class="row" style="margin: 5px">
                                <div class="col-md-2 align-items-center d-flex">
                                    Пол
                                </div>
                                <div class="col-md-4">
                                    <RadzenDropDown @bind-Value="@_survivor.Sex" Data="_sexes" Style="width: 100%"
                                                    TextProperty="@nameof(SexEnumVM.Description)" ValueProperty="@nameof(SexEnumVM.SexValue)"/>
                                </div>
                                @if (_survivor.Sex == SexEnum.Other)
                                {
                                    <div class="col-md">
                                        <RadzenTextBox Style="width: 100%; margin-left: 5px" Placeholder="Уточните, если возможно" @bind-Value=@_survivor.OtherSex />
                                    </div>
                                }
                            </div>
                            <div class="row" style="margin: 5px">
                                <div class="col-md-2 align-items-center d-flex">
                                    Дата рождения
                                </div>
                                <div class="col-md">
                                    <div class="row" style="margin: 0">
                                        <RadzenRadioButtonList @bind-Value=@_dobIsAccurate TValue="bool">
                                            <Items>
                                                <RadzenRadioButtonListItem Text="Известна" Value="true"/>
                                                <RadzenRadioButtonListItem Text="Возраст" Value="false"/>
                                            </Items>
                                        </RadzenRadioButtonList>
                                    </div>
                                    <div class="row" style="margin-left: 0; margin-top: 5px">
                                        @if (_dobIsAccurate)
                                        {
                                            <RadzenDatePicker @bind-Value=@_survivor.AccurateDob DateFormat="d"/>
                                        }
                                        else
                                        {
                                            <RadzenTextBox Placeholder="Полных лет сегодня" Change="AgeChange"/>
                                        }
                                    </div>
                                </div>
                            </div>
                        </RadzenFieldset>
                    </div>
                </div>
                <RadzenTabs>
                    <Tabs>
                        <RadzenTabsItem Text="Жизненная ситуация">
                            <div class="row">
                                <div class="col-md-12">
                                    <InquiryHeaderComponent @ref="@_createInquiry"/>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-8">
                                    <DomicileRecordComponent @ref="@_domicileRecord"/>
                                </div>
                                <div class="col-md-4">
                                    <ChildrenRecordComponent @ref="@_childrenRecord"/>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6">
                                    <MigrationStatusEditorComponent @ref="@_migrationStatusEditor"/>
                                </div>
                                <div class="col-md-6">
                                    <RegistrationStatusEditorComponent @ref="@_registrationStatusEditor"/>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-4">
                                    <EducationLevelsComponent @ref="@_educationLevelRecords"/>
                                </div>
                                <div class="col-md-4">
                                    <SpecialityRecordsComponent @ref="@_specialityRecords"/>
                                </div>
                                <div class="col-md-4">
                                    <WorkingExperienceEditorComponent @ref="@_workingExperienceEditor"/>
                                </div>
                            </div>
                            <div class="row">
                                <VulnerabilitiesEditorComponent @ref="@_vulnerabilitiesEditor"/>
                            </div>
                        </RadzenTabsItem>
                        <RadzenTabsItem Text="Причины обрщения">
                            <div class="row">
                                <button type="button" class="btn btn-outline-success" @onclick="@(() => _episodes.Add(new()))">+</button>
                            </div>
                            @foreach (var episode in _episodes)
                            {
                                <div class="row">
                                    <EpisodeEditorComponent Model="episode"/>
                                </div>
                            }
                        </RadzenTabsItem>
                    </Tabs>
                </RadzenTabs>
                <div class="row justify-content-center">
                    <div class="col-8 d-flex align-items-end justify-content-center" style="margin-top: 16px;">
                        <RadzenButton Icon="save" ButtonStyle="ButtonStyle.Success" style="margin-right: 8px" Text="Добавить" type="submit"/>
                        <RadzenButton Icon="block" ButtonStyle="ButtonStyle.Warning" style="margin-left: 8px" Text="Отмена" type="reset" Click="@CancelClick"/>
                    </div>
                </div>
            </RadzenTemplateForm>
        </div>
    </div>
</div>

@code {
    private bool _dobIsAccurate = true;
    private record SexEnumVM(SexEnum SexValue, string Description);

    private readonly SexEnumVM[] _sexes = {
        new(SexEnum.Female, "женский"), new(SexEnum.Male, "мужской"),
        new(SexEnum.Other, "другой"),
    };

    private class SurvivorCreationRequest
    {
        public string Name { get; set; } = string.Empty;
        public SexEnum Sex { get; set; }
        public string? OtherSex { get; set; }
        public DateTime? AccurateDob { get; set; }
        public DateTime? CalcDob { get; set; }
    }

    private readonly SurvivorCreationRequest _survivor = new();

    private InquiryHeaderComponent? _createInquiry;
    private DomicileRecordComponent? _domicileRecord;
    private ChildrenRecordComponent? _childrenRecord;
    private EducationLevelsComponent? _educationLevelRecords;
    private SpecialityRecordsComponent? _specialityRecords;
    private WorkingExperienceEditorComponent? _workingExperienceEditor;
    private VulnerabilitiesEditorComponent? _vulnerabilitiesEditor;
    private MigrationStatusEditorComponent? _migrationStatusEditor;
    private RegistrationStatusEditorComponent? _registrationStatusEditor;
    private readonly List<EpisodeCreaterModel> _episodes = new ();

    private void CancelClick()
    {
        _notificationService.Notify(new(){Severity = NotificationSeverity.Info, Summary = "Операция отменена"});
        _navigationManager.NavigateTo(nameof(SurvivorCatalogue));
    }

    private async Task SubmitSurvivor()
    {
        if (_createInquiry is null)
        {
            _notificationService.Notify(new(){Severity = NotificationSeverity.Error, Summary = "Ошибка на странице"});
            return;
        }
        var survivorId = Guid.NewGuid();
        var inquiryId = Guid.NewGuid();

        await _survivorCatalogue.ApplyCommand(
            new CreateSurvivor(survivorId, _survivor.Name,
                _survivor.Sex, _survivor.OtherSex,
                _survivor.AccurateDob, _survivor.AccurateDob.HasValue ? default : _survivor.CalcDob), CancellationToken.None);

        await _documentsAggregate.ApplyCommand(new CreateInquiry(
            inquiryId, _createInquiry.DocumentDate, survivorId,
            _createInquiry.IsJuvenile, _createInquiry.InquirySources, _createInquiry.Citizenship ?? string.Empty), CancellationToken.None);

        if(_domicileRecord is not null)
            await _documentsAggregate.ApplyCommand(_domicileRecord.BuildCommandForDocument(inquiryId), CancellationToken.None);

        if (_childrenRecord is not null)
            await _documentsAggregate.ApplyCommand(_childrenRecord.BuildCommand(inquiryId), CancellationToken.None);

        if (_educationLevelRecords is not null)
            foreach (var cmd in _educationLevelRecords.BuildCommands(inquiryId))
                await _documentsAggregate.ApplyCommand(cmd, CancellationToken.None);

        if (_specialityRecords is not null)
            foreach (var cmd in _specialityRecords.BuildCommands(inquiryId))
                await _documentsAggregate.ApplyCommand(cmd, CancellationToken.None);

        if (_workingExperienceEditor?.BuildCommand(inquiryId) is {} workingExperienceCmd)
            await _documentsAggregate.ApplyCommand(workingExperienceCmd, CancellationToken.None);

        if (_vulnerabilitiesEditor?.BuildCommand(inquiryId) is {} vulnerabilitiesCmd)
            await _documentsAggregate.ApplyCommand(vulnerabilitiesCmd, CancellationToken.None);

        if (_migrationStatusEditor?.BuildCommand(inquiryId) is {} migrationCmd)
            await _documentsAggregate.ApplyCommand(migrationCmd, CancellationToken.None);

        if (_registrationStatusEditor?.BuildCommand(inquiryId) is {} registrationCmd)
            await _documentsAggregate.ApplyCommand(registrationCmd, CancellationToken.None);

        foreach (var episode in _episodes)
        {
            var cmd = episode.BuildCommand(survivorId);
            await _episodesCatalogue.ApplyCommand(cmd, CancellationToken.None);
        }
        _notificationService.Notify(new(){Severity = NotificationSeverity.Success, Summary = "Успешно сохранено"});
        _navigationManager.NavigateTo(nameof(SurvivorCatalogue));
    }

    private void AgeChange(string ageString)
    {
        if (string.IsNullOrWhiteSpace(ageString))
        {
            _survivor.CalcDob = null;
            return;
        }

        if (int.TryParse(ageString, out var age) && age > 0)
            _survivor.CalcDob = DateTime.Today.AddYears(age * -1).AddDays(-180);
    }

}
